# -*- coding: utf-8 -*-
"""svm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13vclPG6fVnMFXlzlv6rRivtr7tYsXQBJ

### **Phân tích dự đoán thẻ giả mạo trong giao dịch bằng mô hình SVM **
"""

import datetime
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder

"""1. **import datetime**:
 Import thư viện datetime, giúp làm việc với ngày và giờ. Sử dụng datetime để thao tác với ngày giờ, tính toán thời gian, hoặc chuyển đổi dữ liệu thời gian trong các dự án phân tích dữ liệu.
2. **import numpy as np**:
 Import thư viện numpy và gán tên viết tắt  là np.
Numpy cung cấp các công cụ cho tính toán số học hiệu quả, làm việc với mảng và ma trận. Đây là thư viện cơ bản cho các phép toán số học trong Python.
3. **import pandas as pd**:
Import thư viện pandas và gán tên viết tắ là pd.
Pandas là thư viện chính để thao tác với dữ liệu dạng bảng. Nó cung cấp các cấu trúc dữ liệu như DataFrame và Series, rất hữu ích cho việc xử lý, phân tích và quản lý dữ liệu.
4. **import matplotlib.pyplot as plt**:
Import lớp  pyplot của thư viện matplotlib và gán tên viết tắ là plt.
Matplotlib là thư viện vẽ đồ thị trong Python. pyplot cung cấp các hàm để tạo các biểu đồ và đồ thị để trực quan hóa dữ liệu.
5. **import seaborn as sns**:
Import thư viện seaborn và gán tên viết tắ là sns.
Seaborn là một thư viện vẽ đồ thị nâng cao, dựa trên matplotlib, cung cấp các biểu đồ và giao diện trực quan hơn cho phân tích dữ liệu. Nó thường được sử dụng để tạo các đồ thị thống kê và nâng cao khả năng trực quan hóa dữ liệu.
6.  **from sklearn.model_selection import train_test_split**:
Mục đích: Import hàm train_test_split từ sklearn.model_selection.
Sử dụng: Hàm train_test_split được sử dụng để chia dữ liệu thành các tập huấn luyện và kiểm tra, giúp đánh giá mô hình học máy.
7. **from sklearn.svm import SVC**:
Import lớp SVC (Support Vector Classification) từ thư viện sklearn.svm.
 SVC là một loại mô hình học máy dùng để phân loại. Nó cố gắng tìm mặt phẳng phân chia tối ưu giữa các lớp trong không gian dữ liệu.
8. **from sklearn.metrics import accuracy_score**:
 Import hàm accuracy_score từ thư viện sklearn.metrics.
 Hàm accuracy_score được dùng để tính toán độ chính xác của mô hình phân loại, tức là tỷ lệ dự đoán đúng trên tổng số dự đoán.
9. **from sklearn.preprocessing import LabelEncoder**:
 Import lớp LabelEncoder từ thư viện sklearn.preprocessing.
 LabelEncoder được sử dụng để mã hóa các giá trị phân loại (như chuỗi ký tự) thành các số nguyên, giúp mô hình học máy có thể xử lý dữ liệu phân loại.
"""

train_data = pd.read_csv("fraudTrain.csv")

"""Mục đích: Đọc dữ liệu từ một file CSV và lưu vào một DataFrame của pandas.

pd.read_csv(): Đây là một hàm của thư viện pandas, dùng để đọc dữ liệu từ file CSV và chuyển nó thành một DataFrame.
"fraudTrain.csv": Đây là tên của file CSV chứa dữ liệu muốn đọc. File này phải có định dạng CSV và nằm trong thư mục làm việc hiện tại hoặc cần cung cấp đường dẫn đầy đủ đến file.
"""

train_data.info()

"""Khi  chạy train_data.info(),  sẽ nhận được thông tin về DataFrame train_data"""

train_data.describe()

"""Lệnh train_data.describe() trong pandas được sử dụng để tạo ra một bảng thống kê mô tả cho các cột dữ liệu số trong DataFrame. Đây là cách để có thể hiểu rõ hơn về phân phối và các đặc điểm cơ bản của dữ liệu số trong DataFrame."""

train_data.dtypes

"""Lệnh `train_data.dtypes` trong pandas được sử dụng để kiểm tra kiểu dữ liệu của từng cột trong DataFrame train_data. Nó trả về một Series, trong đó chỉ số là tên các cột và giá trị là kiểu dữ liệu của các cột đó."""

train_data.columns

"""Lệnh `train_data.columns` trong pandas được sử dụng để liệt kê tất cả các tên cột trong DataFrame train_data. Nó trả về một Index object chứa các tên cột của DataFrame."""

train_data["trans_date_trans_time"] = pd.to_datetime(train_data["trans_date_trans_time"])
train_data["dob"] = pd.to_datetime(train_data["dob"])
train_data

"""Đoạn mã  chuyển đổi hai cột trong DataFrame train_data từ định dạng chuỗi ký tự (string) thành định dạng ngày giờ (datetime)."""

train_data.drop(columns=['Unnamed: 0','cc_num','first', 'last', 'street', 'city', 'state', 'zip', 'dob', 'trans_num','trans_date_trans_time'],inplace=True)
train_data

"""Đoạn mã loại bỏ một số cột không cần thiết khỏi DataFrame train_data bằng cách sử dụng phương thức drop."""

train_data.dropna(ignore_index=True)
train_data

"""Lệnh `train_data.dropna(ignore_index=True)` trong pandas được sử dụng để loại bỏ các hàng có giá trị thiếu (NaN) khỏi DataFrame train_data."""

encoder = LabelEncoder()
train_data["merchant"] = encoder.fit_transform(train_data["merchant"])
train_data["category"] = encoder.fit_transform(train_data["category"])
train_data["gender"] = encoder.fit_transform(train_data["gender"])
train_data["job"] = encoder.fit_transform(train_data["job"])

"""Đoạn mã  sử dụng `LabelEncoder` từ thư viện sklearn để mã hóa các biến phân loại trong DataFrame train_data. Đây là một bước quan trọng trong việc tiền xử lý dữ liệu, chuẩn bị dữ liệu cho các mô hình học máy."""

train_data

"""In ra DataFrame train_data"""

exit_counts = train_data["is_fraud"].value_counts()
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)  # Subplot for the pie chart
plt.pie(exit_counts, labels=["No", "YES"], autopct="%0.0f%%")
plt.title("is_fraud Counts")
plt.tight_layout()  # Adjust layout to prevent overlapping
plt.show()

"""Đoạn mã tạo ra một biểu đồ hình tròn  để trực quan hóa tỷ lệ phân phối của biến phân loại is_fraud trong DataFrame train_data. Biểu đồ này giúp hiểu sự phân bố của các lớp trong dữ liệu, cụ thể là tỷ lệ của các giao dịch có và không có gian lận.


"""

import matplotlib.pyplot as plt
# Biểu đồ phân tán (Scatter plot)
plt.figure(figsize=(8, 6))
plt.scatter(train_data['amt'], train_data['category'], c=train_data['is_fraud'], cmap='viridis')
plt.xlabel('amt')
plt.ylabel('category')
plt.title('Scatter Plot of amt vs category')
plt.colorbar(label='is_fraud')
plt.show()

# Biểu đồ hộp (Box plot)
plt.figure(figsize=(8, 6))
sns.boxplot(x='is_fraud', y='amt', data=train_data)
plt.xlabel('is_fraud')
plt.ylabel('amt')
plt.title('Box Plot of amt by is_fraud')
plt.show()

# Biểu đồ phân phối (Distribution plot)
plt.figure(figsize=(8, 6))
sns.histplot(train_data['amt'], kde=True)
plt.xlabel('amt')
plt.ylabel('Frequency')
plt.title('Distribution Plot of amt')
plt.show()

# Biểu đồ nhiệt (Heatmap)
corr_matrix = train_data.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

import matplotlib.pyplot as plt
# Biểu đồ violin
plt.figure(figsize=(8, 6))
sns.violinplot(x='is_fraud', y='amt', data=train_data)
plt.xlabel('is_fraud')
plt.ylabel('amt')
plt.title('Violin Plot of amt by is_fraud')
plt.show()

# Biểu đồ cặp (Pair plot)
sns.pairplot(train_data, hue='is_fraud', vars=['amt', 'category', 'gender'])
plt.suptitle('Pair Plot of amt, category, and gender', y=1.02)
plt.show()

# Biểu đồ jointplot
sns.jointplot(x='amt', y='category', data=train_data, kind='kde', hue='is_fraud')
plt.suptitle('Joint Plot of amt and category', y=1.02)
plt.show()

X = train_data.drop(columns=["is_fraud"], inplace = False)
Y = train_data["is_fraud"]

"""Dùng để tách dữ liệu thành hai phần: X (dữ liệu đầu vào) và Y (nhãn mục tiêu). Đây là bước chuẩn bị dữ liệu quan trọng trước khi xây dựng mô hình học máy."""

model = SVC()
model.fit(X, Y)

"""Dòng mã  dùng để khởi tạo và huấn luyện một mô hình SVM (Support Vector Machine) để phân loại dữ liệu."""

model.score(X, Y)

"""Phương thức `model.score(X, Y)` được sử dụng để đánh giá hiệu suất của mô hình đã được huấn luyện bằng cách tính toán điểm số chính xác (accuracy) trên tập dữ liệu đầu vào X và nhãn mục tiêu Y.

# **Tiến hành Test Model**
"""

test_data1 = pd.read_csv("fraudTest.csv")
test_data1

"""Đoạn mã  đọc dữ liệu từ tập tin CSV ` fraudTest.csv` vào một DataFrame test_data. Để kiểm tra mô hình SVM đã huấn luyện"""

test_data1.drop(columns=['Unnamed: 0','cc_num','first', 'last', 'street', 'city', 'state', 'zip', 'dob', 'trans_num','trans_date_trans_time'],inplace=True)
test_data1

"""Loại bỏ các cột không cần thiết: Xóa các cột được chỉ định từ DataFrame test_data. Tham số inplace=True cho phép thay đổi trực tiếp DataFrame mà không tạo ra một bản sao mới."""

test_data_clean = test_data1.dropna()

test_data_clean

encoder = LabelEncoder()
test_data_clean["merchant"] = encoder.fit_transform(test_data_clean["merchant"])
test_data_clean["category"] = encoder.fit_transform(test_data_clean["category"])
test_data_clean["gender"] = encoder.fit_transform(test_data_clean["gender"])
test_data_clean["job"] = encoder.fit_transform(test_data_clean["job"])

X_test = test_data_clean.drop(columns=["is_fraud"], inplace = False)
Y_test = test_data_clean["is_fraud"]

y_pred = model.predict(X_test)
y_pred

accuracy = accuracy_score(test_data1['is_fraud'],y_pred)
accuracy